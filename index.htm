<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Magnet to Torrent Converter | Fast & Free Online Tool | Data March</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;600&display=swap" rel="stylesheet">
    <!-- 4 -->
    <style>
        /* Styles from your original code */
        :root {
            --primary-color: #667eea;
            --secondary-color: #764ba2;
            --background-gradient-start: #667eea;
            --background-gradient-end: #764ba2;
            --text-color: #2d3748;
            --white: #ffffff;
            --error-color: #e53e3e;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            scroll-behavior: smooth;
        }
        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, var(--background-gradient-start), var(--background-gradient-end));
            color: var(--text-color);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }
        .container {
            width: 100%;
            max-width: 600px;
            background: var(--white);
            border-radius: 16px;
            padding: 30px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            margin-bottom: 20px;
        }
        textarea, .btn {
            width: 100%;
            margin: 15px 0;
            padding: 15px;
            border-radius: 12px;
        }
        textarea {
            min-height: 120px;
            border: 2px solid #e2e8f0;
        }
        .btn {
            border: none;
            background: var(--primary-color);
            color: var(--white);
            cursor: pointer;
            font-weight: 600;
        }
        .btn:hover {
            background: #5a67d8;
        }
        .error, .result {
            margin: 10px 0;
            padding: 10px;
            border-radius: 8px;
        }
        .error {
            background: #fff5f5;
            color: var(--error-color);
        }
        .result {
            background: #f7fafc;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Magnet to Torrent Converter</h1>
        <textarea id="magnetUrl" placeholder="Paste your magnet link here (magnet:?xt=urn:btih:...)"></textarea>
        <div id="error" class="error" style="display: none;">Please enter a valid magnet URL</div>
        <button id="convertBtn" class="btn" onclick="convertMagnet()">Convert to Torrent</button>
        <button id="downloadBtn" class="btn" style="display: none;" onclick="downloadTorrent()">Download Torrent File</button>
        <div id="result" class="result" style="display: none;"></div>
    </div>

    <script>
        const $ = selector => document.querySelector(selector);

        function validateMagnetUrl(url) {
            const magnetRegex = /^magnet:\?xt=urn:btih:[a-fA-F0-9]{40}.*$/;
            return magnetRegex.test(url.trim());
        }

        function extractTorrentInfo(magnetUrl) {
            const nameMatch = magnetUrl.match(/dn=([^&]+)/);
            const name = nameMatch ? decodeURIComponent(nameMatch[1]) : 'Unknown File';
            const hash = magnetUrl.match(/btih:([a-fA-F0-9]{40})/);
            const trackers = (magnetUrl.match(/tr=([^&]+)/g) || [])
                .map(tracker => decodeURIComponent(tracker.replace('tr=', '')));
            return { name, hash: hash ? hash[1] : null, trackers };
        }

        function bencode(data) {
            const encode = item => {
                if (typeof item === 'string') {
                    return `${item.length}:${item}`;
                }
                if (typeof item === 'number') {
                    return `i${item}e`;
                }
                if (Array.isArray(item)) {
                    return `l${item.map(encode).join('')}e`;
                }
                if (typeof item === 'object') {
                    const sortedKeys = Object.keys(item).sort();
                    return `d${sortedKeys.map(key => `${encode(key)}${encode(item[key])}`).join('')}e`;
                }
                return '';
            };
            return encode(data);
        }

        function convertMagnet() {
            const magnetUrl = $('#magnetUrl').value.trim();
            const errorDiv = $('#error');
            const resultDiv = $('#result');
            const convertBtn = $('#convertBtn');
            const downloadBtn = $('#downloadBtn');

            errorDiv.style.display = 'none';
            resultDiv.style.display = 'none';
            downloadBtn.style.display = 'none';

            if (!validateMagnetUrl(magnetUrl)) {
                errorDiv.textContent = 'Please enter a valid magnet URL';
                errorDiv.style.display = 'block';
                return;
            }

            const torrentInfo = extractTorrentInfo(magnetUrl);

            if (torrentInfo && torrentInfo.hash) {
                resultDiv.textContent = `Hash: ${torrentInfo.hash}`;
                resultDiv.style.display = 'block';
                downloadBtn.style.display = 'block';
            } else {
                errorDiv.textContent = 'Unable to extract torrent info';
                errorDiv.style.display = 'block';
            }
        }

        function downloadTorrent() {
    const magnetUrl = $('#magnetUrl').value.trim();
    const torrentInfo = extractTorrentInfo(magnetUrl);

    if (!torrentInfo || !torrentInfo.hash) {
        alert('Invalid magnet link. Unable to generate torrent file.');
        return;
    }

    // Prepare the .torrent file structure
    const torrentFile = {
        announce: torrentInfo.trackers[0] || 'http://tracker.opentrackr.org:1337/announce',
        'announce-list': torrentInfo.trackers.map(tracker => [tracker]),
        info: {
            name: torrentInfo.name || 'download',
            'piece length': 16384, // 16 KB pieces
            pieces: '', // Empty for now as real file data is not included
        },
        'creation date': Math.floor(Date.now() / 1000),
        'created by': 'Magnet to Torrent Converter',
        comment: 'Generated from magnet link.'
    };

    // Encode the .torrent file using bencode
    const torrentContent = bencode(torrentFile);

    // Create a Blob and trigger download
    const blob = new Blob([torrentContent], { type: 'application/x-bittorrent' });
    const downloadLink = document.createElement('a');
    downloadLink.href = URL.createObjectURL(blob);
    downloadLink.download = `${torrentInfo.name || 'download'}.torrent`;
    downloadLink.click();
}

// Extract information from magnet URL
function extractTorrentInfo(magnetUrl) {
    try {
        const url = new URL(magnetUrl);
        if (url.protocol !== 'magnet:') return null;

        const params = new URLSearchParams(url.search);
        const infoHash = params.get('xt')?.split(':').pop();
        const name = params.get('dn');
        const trackers = params.getAll('tr');

        return { hash: infoHash, name, trackers };
    } catch (error) {
        console.error('Error parsing magnet URL:', error);
        return null;
    }
}

// Minimal bencode function (use a library in production for better reliability)
function bencode(data) {
    if (typeof data === 'string') {
        return `${data.length}:${data}`;
    } else if (typeof data === 'number') {
        return `i${data}e`;
    } else if (Array.isArray(data)) {
        return `l${data.map(bencode).join('')}e`;
    } else if (typeof data === 'object') {
        return `d${Object.entries(data)
            .sort(([a], [b]) => (a < b ? -1 : 1))
            .map(([k, v]) => bencode(k) + bencode(v))
            .join('')}e`;
    }
    throw new Error('Unsupported data type for bencoding.');
}


    </script>
</body>
</html>
